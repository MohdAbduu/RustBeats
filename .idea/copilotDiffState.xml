<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="/target/&#10;**/*.rs.bk&#10;wasm-pack.log&#10;node_modules/&#10;dist/&#10;.DS_Store&#10;static/wasm_bg.wasm&#10;static/wasm_bg.wasm.d.ts&#10;static/wasm.d.ts&#10;static/wasm.js" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app.rs" />
              <option name="originalContent" value="use crate::components::Navbar;&#10;use crate::types::{CartProduct, Product};&#10;use yew::prelude::*;&#10;use yew_router::prelude::*;&#10;&#10;use crate::pages::{Home, ProductDetail};&#10;use crate::route::Route;&#10;&#10;struct State {&#10;    cart_products: Vec&lt;CartProduct&gt;,&#10;}&#10;&#10;pub struct App {&#10;    state: State,&#10;    link: ComponentLink&lt;Self&gt;,&#10;}&#10;&#10;pub enum Msg {&#10;    AddToCart(Product),&#10;}&#10;&#10;impl Component for App {&#10;    type Message = Msg;&#10;    type Properties = ();&#10;&#10;    fn create(_: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {&#10;        let cart_products = vec![];&#10;&#10;        Self {&#10;            state: State { cart_products },&#10;            link,&#10;        }&#10;    }&#10;&#10;    fn update(&amp;mut self, message: Self::Message) -&gt; ShouldRender {&#10;        match message {&#10;            Msg::AddToCart(product) =&gt; {&#10;                let cart_product = self&#10;                    .state&#10;                    .cart_products&#10;                    .iter_mut()&#10;                    .find(|cp: &amp;&amp;mut CartProduct| cp.product.id == product.id);&#10;&#10;                if let Some(cp) = cart_product {&#10;                    cp.quantity += 1;&#10;                } else {&#10;                    self.state.cart_products.push(CartProduct {&#10;                        product: product.clone(),&#10;                        quantity: 1,&#10;                    })&#10;                }&#10;                true&#10;            }&#10;        }&#10;    }&#10;&#10;    fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {&#10;        false&#10;    }&#10;&#10;    fn view(&amp;self) -&gt; Html {&#10;        let handle_add_to_cart = self&#10;            .link&#10;            .callback(|product: Product| Msg::AddToCart(product));&#10;        let cart_products = self.state.cart_products.clone();&#10;&#10;        let render = Router::render(move |switch: Route| match switch {&#10;            Route::ProductDetail(id) =&gt; {&#10;                html! {&lt;ProductDetail id=id on_add_to_cart=handle_add_to_cart.clone() /&gt;}&#10;            }&#10;            Route::HomePage =&gt; {&#10;                html! {&lt;Home cart_products=cart_products.clone() on_add_to_cart=handle_add_to_cart.clone()/&gt;}&#10;            }&#10;        });&#10;&#10;        html! {&#10;            &lt;&gt;&#10;                &lt;Navbar cart_products=self.state.cart_products.clone() /&gt;&#10;                &lt;Router&lt;Route, ()&gt; render=render/&gt;&#10;            &lt;/&gt;&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="use crate::components::Navbar;&#10;use crate::types::{CartProduct, Product};&#10;use yew::prelude::*;&#10;use yew_router::prelude::*;&#10;&#10;use crate::pages::{Home, ProductDetail};&#10;use crate::route::Route;&#10;&#10;struct State {&#10;    cart_products: Vec&lt;CartProduct&gt;,&#10;}&#10;&#10;pub struct App {&#10;    state: State,&#10;    link: ComponentLink&lt;Self&gt;,&#10;}&#10;&#10;pub enum Msg {&#10;    AddToCart(Product),&#10;}&#10;&#10;impl Component for App {&#10;    type Message = Msg;&#10;    type Properties = ();&#10;&#10;    fn create(_: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {&#10;        let cart_products = vec![];&#10;&#10;        Self {&#10;            state: State { cart_products },&#10;            link,&#10;        }&#10;    }&#10;&#10;    fn update(&amp;mut self, message: Self::Message) -&gt; ShouldRender {&#10;        match message {&#10;            Msg::AddToCart(product) =&gt; {&#10;                let cart_product = self&#10;                    .state&#10;                    .cart_products&#10;                    .iter_mut()&#10;                    .find(|cp: &amp;&amp;mut CartProduct| cp.product.id == product.id);&#10;&#10;                if let Some(cp) = cart_product {&#10;                    cp.quantity += 1;&#10;                } else {&#10;                    self.state.cart_products.push(CartProduct {&#10;                        product: product.clone(),&#10;                        quantity: 1,&#10;                    })&#10;                }&#10;                true&#10;            }&#10;        }&#10;    }&#10;&#10;    fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {&#10;        false&#10;    }&#10;&#10;    fn view(&amp;self) -&gt; Html {&#10;        let handle_add_to_cart = self&#10;            .link&#10;            .callback(|product: Product| Msg::AddToCart(product));&#10;        let cart_products = self.state.cart_products.clone();&#10;&#10;        let render = Router::render(move |switch: Route| match switch {&#10;            Route::ProductDetail(id) =&gt; {&#10;                html! {&lt;ProductDetail id=id on_add_to_cart=handle_add_to_cart.clone() /&gt;}&#10;            }&#10;            Route::HomePage =&gt; {&#10;                html! {&lt;Home cart_products=cart_products.clone() on_add_to_cart=handle_add_to_cart.clone()/&gt;}&#10;            }&#10;        });&#10;&#10;        html! {&#10;            &lt;&gt;&#10;                &lt;Navbar cart_products=self.state.cart_products.clone() /&gt;&#10;                &lt;Router&lt;Route, ()&gt; &#10;                    render=render&#10;                    redirect=Router::redirect(|_| Route::HomePage)&#10;                /&gt;&#10;            &lt;/&gt;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/product_card.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/product_card.rs" />
              <option name="originalContent" value="use crate::components::AtcButton;&#10;use crate::route::Route;&#10;use crate::types::Product;&#10;use yew::prelude::*;&#10;use yew_router::components::RouterAnchor;&#10;&#10;pub struct ProductCard {&#10;    props: Props,&#10;}&#10;&#10;#[derive(Properties, Clone)]&#10;pub struct Props {&#10;    pub product: Product,&#10;    pub on_add_to_cart: Callback&lt;Product&gt;,&#10;}&#10;&#10;impl Component for ProductCard {&#10;    type Message = ();&#10;    type Properties = Props;&#10;&#10;    fn create(props: Self::Properties, _link: ComponentLink&lt;Self&gt;) -&gt; Self {&#10;        Self { props }&#10;    }&#10;&#10;    fn update(&amp;mut self, _msg: Self::Message) -&gt; ShouldRender {&#10;        true&#10;    }&#10;&#10;    fn change(&amp;mut self, _props: Self::Properties) -&gt; ShouldRender {&#10;        true&#10;    }&#10;&#10;    fn view(&amp;self) -&gt; Html {&#10;        type Anchor = RouterAnchor&lt;Route&gt;;&#10;&#10;        html! {&#10;            &lt;div class=&quot;product_card_container&quot;&gt;&#10;                &lt;Anchor route=Route::ProductDetail(self.props.product.id) classes=&quot;product_card_anchor&quot;&gt;&#10;                    &lt;img class=&quot;product_card_image&quot; src={&amp;self.props.product.image}/&gt;&#10;                    &lt;div class=&quot;product_card_name&quot;&gt;{&amp;self.props.product.name}&lt;/div&gt;&#10;                    &lt;div class=&quot;product_card_price&quot;&gt;{&quot;$&quot;}{&amp;self.props.product.price}&lt;/div&gt;&#10;                &lt;/Anchor&gt;&#10;                &lt;AtcButton product=self.props.product.clone() on_add_to_cart=self.props.on_add_to_cart.clone() /&gt;&#10;            &lt;/div&gt;&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="use crate::components::AtcButton;&#10;use crate::route::Route;&#10;use crate::types::Product;&#10;use yew::prelude::*;&#10;use yew_router::components::RouterAnchor;&#10;&#10;pub struct ProductCard {&#10;    props: Props,&#10;}&#10;&#10;#[derive(Properties, Clone)]&#10;pub struct Props {&#10;    pub product: Product,&#10;    pub on_add_to_cart: Callback&lt;Product&gt;,&#10;}&#10;&#10;impl Component for ProductCard {&#10;    type Message = ();&#10;    type Properties = Props;&#10;&#10;    fn create(props: Self::Properties, _link: ComponentLink&lt;Self&gt;) -&gt; Self {&#10;        Self { props }&#10;    }&#10;&#10;    fn update(&amp;mut self, _msg: Self::Message) -&gt; ShouldRender {&#10;        true&#10;    }&#10;&#10;    fn change(&amp;mut self, _props: Self::Properties) -&gt; ShouldRender {&#10;        true&#10;    }&#10;&#10;    fn view(&amp;self) -&gt; Html {&#10;        type Anchor = RouterAnchor&lt;Route&gt;;&#10;        let image_path = format!(&quot;/products/{}&quot;, &amp;self.props.product.image);&#10;&#10;        html! {&#10;            &lt;div class=&quot;product_card_container&quot;&gt;&#10;                &lt;Anchor route=Route::ProductDetail(self.props.product.id) classes=&quot;product_card_anchor&quot;&gt;&#10;                    &lt;img class=&quot;product_card_image&quot; src=image_path/&gt;&#10;                    &lt;div class=&quot;product_card_name&quot;&gt;{&amp;self.props.product.name}&lt;/div&gt;&#10;                    &lt;div class=&quot;product_card_price&quot;&gt;{&quot;$&quot;}{&amp;self.props.product.price}&lt;/div&gt;&#10;                &lt;/Anchor&gt;&#10;                &lt;AtcButton product=self.props.product.clone() on_add_to_cart=self.props.on_add_to_cart.clone() /&gt;&#10;            &lt;/div&gt;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/product_detail.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/product_detail.rs" />
              <option name="originalContent" value="use crate::api;&#10;use crate::components::AtcButton;&#10;use crate::types::Product;&#10;use anyhow::Error;&#10;use yew::format::Json;&#10;use yew::prelude::*;&#10;use yew::services::fetch::FetchTask;&#10;&#10;struct State {&#10;    product: Option&lt;Product&gt;,&#10;    get_product_error: Option&lt;Error&gt;,&#10;    get_product_loaded: bool,&#10;}&#10;&#10;pub struct ProductDetail {&#10;    props: Props,&#10;    state: State,&#10;    link: ComponentLink&lt;Self&gt;,&#10;    task: Option&lt;FetchTask&gt;,&#10;}&#10;&#10;#[derive(Properties, Clone)]&#10;pub struct Props {&#10;    pub id: i32,&#10;    pub on_add_to_cart: Callback&lt;Product&gt;,&#10;}&#10;&#10;pub enum Msg {&#10;    GetProduct,&#10;    GetProductSuccess(Product),&#10;    GetProductError(Error),&#10;}&#10;&#10;impl Component for ProductDetail {&#10;    type Message = Msg;&#10;    type Properties = Props;&#10;&#10;    fn create(props: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {&#10;        link.send_message(Msg::GetProduct);&#10;&#10;        Self {&#10;            props,&#10;            state: State {&#10;                product: None,&#10;                get_product_error: None,&#10;                get_product_loaded: false,&#10;            },&#10;            link,&#10;            task: None,&#10;        }&#10;    }&#10;&#10;    fn update(&amp;mut self, message: Self::Message) -&gt; ShouldRender {&#10;        match message {&#10;            Msg::GetProduct =&gt; {&#10;                let handler = self&#10;                    .link&#10;                    .callback(move |response: api::FetchResponse&lt;Product&gt;| {&#10;                        let (_, Json(data)) = response.into_parts();&#10;                        match data {&#10;                            Ok(product) =&gt; Msg::GetProductSuccess(product),&#10;                            Err(err) =&gt; Msg::GetProductError(err),&#10;                        }&#10;                    });&#10;&#10;                self.task = Some(api::get_product(self.props.id, handler));&#10;                true&#10;            }&#10;            Msg::GetProductSuccess(product) =&gt; {&#10;                self.state.product = Some(product);&#10;                self.state.get_product_loaded = true;&#10;                true&#10;            }&#10;            Msg::GetProductError(error) =&gt; {&#10;                self.state.get_product_error = Some(error);&#10;                self.state.get_product_loaded = true;&#10;                true&#10;            }&#10;        }&#10;    }&#10;&#10;    fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {&#10;        false&#10;    }&#10;&#10;    fn view(&amp;self) -&gt; Html {&#10;        if let Some(ref product) = self.state.product {&#10;            html! {&#10;                &lt;div class=&quot;product_detail_container&quot;&gt;&#10;                    &lt;img class=&quot;product_detail_image&quot; src={&amp;product.image}/&gt;&#10;                    &lt;div class=&quot;product_card_name&quot;&gt;{&amp;product.name}&lt;/div&gt;&#10;                    &lt;div style=&quot;margin: 10px 0; line-height: 24px;&quot;&gt;{&amp;product.description}&lt;/div&gt;&#10;                    &lt;div class=&quot;product_card_price&quot;&gt;{&quot;$&quot;}{&amp;product.price}&lt;/div&gt;&#10;                    &lt;AtcButton product=product.clone() on_add_to_cart=self.props.on_add_to_cart.clone() /&gt;&#10;                &lt;/div&gt;&#10;            }&#10;        } else if !self.state.get_product_loaded {&#10;            html! {&#10;                &lt;div class=&quot;loading_spinner_container&quot;&gt;&#10;                    &lt;div class=&quot;loading_spinner&quot;&gt;&lt;/div&gt;&#10;                    &lt;div class=&quot;loading_spinner_text&quot;&gt;{&quot;Loading ...&quot;}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;            }&#10;        } else {&#10;            html! {&#10;                &lt;div&gt;&#10;                    &lt;span&gt;{&quot;Error loading product! :(&quot;}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="use crate::api;&#10;use crate::components::AtcButton;&#10;use crate::types::Product;&#10;use anyhow::Error;&#10;use yew::format::Json;&#10;use yew::prelude::*;&#10;use yew::services::fetch::FetchTask;&#10;&#10;struct State {&#10;    product: Option&lt;Product&gt;,&#10;    get_product_error: Option&lt;Error&gt;,&#10;    get_product_loaded: bool,&#10;}&#10;&#10;pub struct ProductDetail {&#10;    props: Props,&#10;    state: State,&#10;    link: ComponentLink&lt;Self&gt;,&#10;    task: Option&lt;FetchTask&gt;,&#10;}&#10;&#10;#[derive(Properties, Clone)]&#10;pub struct Props {&#10;    pub id: i32,&#10;    pub on_add_to_cart: Callback&lt;Product&gt;,&#10;}&#10;&#10;pub enum Msg {&#10;    GetProduct,&#10;    GetProductSuccess(Product),&#10;    GetProductError(Error),&#10;}&#10;&#10;impl Component for ProductDetail {&#10;    type Message = Msg;&#10;    type Properties = Props;&#10;&#10;    fn create(props: Self::Properties, link: ComponentLink&lt;Self&gt;) -&gt; Self {&#10;        link.send_message(Msg::GetProduct);&#10;&#10;        Self {&#10;            props,&#10;            state: State {&#10;                product: None,&#10;                get_product_error: None,&#10;                get_product_loaded: false,&#10;            },&#10;            link,&#10;            task: None,&#10;        }&#10;    }&#10;&#10;    fn update(&amp;mut self, message: Self::Message) -&gt; ShouldRender {&#10;        match message {&#10;            Msg::GetProduct =&gt; {&#10;                let handler = self&#10;                    .link&#10;                    .callback(move |response: api::FetchResponse&lt;Product&gt;| {&#10;                        let (_, Json(data)) = response.into_parts();&#10;                        match data {&#10;                            Ok(product) =&gt; Msg::GetProductSuccess(product),&#10;                            Err(err) =&gt; Msg::GetProductError(err),&#10;                        }&#10;                    });&#10;&#10;                self.task = Some(api::get_product(self.props.id, handler));&#10;                true&#10;            }&#10;            Msg::GetProductSuccess(product) =&gt; {&#10;                self.state.product = Some(product);&#10;                self.state.get_product_loaded = true;&#10;                true&#10;            }&#10;            Msg::GetProductError(error) =&gt; {&#10;                self.state.get_product_error = Some(error);&#10;                self.state.get_product_loaded = true;&#10;                true&#10;            }&#10;        }&#10;    }&#10;&#10;    fn change(&amp;mut self, _: Self::Properties) -&gt; ShouldRender {&#10;        false&#10;    }&#10;&#10;    fn view(&amp;self) -&gt; Html {&#10;        if let Some(ref product) = self.state.product {&#10;            let image_path = format!(&quot;/products/{}&quot;, &amp;product.image);&#10;            html! {&#10;                &lt;div class=&quot;product_detail_container&quot;&gt;&#10;                    &lt;div class=&quot;product_detail_image_container&quot;&gt;&#10;                        &lt;img class=&quot;product_detail_image&quot; src=image_path /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;product_detail_info&quot;&gt;&#10;                        &lt;h2 class=&quot;product_detail_name&quot;&gt;{&amp;product.name}&lt;/h2&gt;&#10;                        &lt;p class=&quot;product_detail_description&quot;&gt;{&amp;product.description}&lt;/p&gt;&#10;                        &lt;div class=&quot;product_detail_price&quot;&gt;{&quot;$&quot;}{&amp;product.price}&lt;/div&gt;&#10;                        &lt;div class=&quot;product_detail_controls&quot;&gt;&#10;                            &lt;AtcButton product=product.clone() on_add_to_cart=self.props.on_add_to_cart.clone() /&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            }&#10;        } else if !self.state.get_product_loaded {&#10;            html! {&#10;                &lt;div class=&quot;loading-container&quot;&gt;&#10;                    {&quot;Loading...&quot;}&#10;                &lt;/div&gt;&#10;            }&#10;        } else {&#10;            html! {&#10;                &lt;div class=&quot;error-container&quot;&gt;&#10;                    {&quot;Error loading product&quot;}&#10;                &lt;/div&gt;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/route.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/route.rs" />
              <option name="originalContent" value="use yew_router::prelude::*;&#10;&#10;#[derive(Switch, Debug, Clone)]&#10;pub enum Route {&#10;    #[to = &quot;/product/{id}&quot;]&#10;    ProductDetail(i32),&#10;    #[to = &quot;/&quot;]&#10;    HomePage,&#10;}&#10;" />
              <option name="updatedContent" value="use yew_router::prelude::*;&#10;&#10;#[derive(Switch, Debug, Clone)]&#10;pub enum Route {&#10;    #[to = &quot;/products/{id}&quot;]&#10;    ProductDetail(i32),&#10;    #[to = &quot;/&quot;]&#10;    HomePage,&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/static/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/static/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;title&gt;RustMart&lt;/title&gt;&#10;    &lt;script type=&quot;module&quot;&gt;&#10;        import init from &quot;/wasm.js&quot;;&#10;        init();&#10;    &lt;/script&gt;&#10;    &lt;link rel=&quot;shortcut icon&quot; href=&quot;#&quot; /&gt;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;title&gt;RustBeats - Album Store&lt;/title&gt;&#10;    &lt;script type=&quot;module&quot;&gt;&#10;        import init from &quot;/wasm.js&quot;;&#10;        init();&#10;    &lt;/script&gt;&#10;    &lt;link rel=&quot;shortcut icon&quot; href=&quot;#&quot; /&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;/styles.css&quot; /&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/static/styles.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/static/styles.css" />
              <option name="originalContent" value="/* RustMart - Main Stylesheet */&#10;&#10;/* Reset and Base Styles */&#10;* {&#10;  margin: 0;&#10;  padding: 0;&#10;  box-sizing: border-box;&#10;}&#10;&#10;body {&#10;  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;  background-color: #121212;&#10;  color: #ffffff;&#10;  line-height: 1.6;&#10;}&#10;&#10;/* Navbar Styles */&#10;.navbar {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  background-color: #1e1e1e;&#10;  color: white;&#10;  padding: 1.2rem 2.5rem;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);&#10;  position: sticky;&#10;  top: 0;&#10;  z-index: 100;&#10;  border-bottom: 1px solid #333;&#10;}&#10;&#10;.navbar_title {&#10;  font-size: 2rem;&#10;  font-weight: bold;&#10;  letter-spacing: 2px;&#10;  color: #1db954; /* Spotify-like green */&#10;  text-transform: uppercase;&#10;}&#10;&#10;.navbar_cart_value {&#10;  background-color: #1db954;&#10;  color: #ffffff;&#10;  padding: 0.6rem 1.2rem;&#10;  border-radius: 25px;&#10;  font-weight: bold;&#10;  box-shadow: 0 2px 8px rgba(29, 185, 84, 0.3);&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.navbar_cart_value:hover {&#10;  transform: scale(1.05);&#10;  background-color: #1ed760;&#10;}&#10;&#10;/* Product List Layout */&#10;.product_card_list {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));&#10;  gap: 2.5rem;&#10;  padding: 3rem;&#10;  max-width: 1400px;&#10;  margin: 0 auto;&#10;}&#10;&#10;/* Product Card Styles */&#10;.product_card_container {&#10;  background-color: #1e1e1e;&#10;  border-radius: 12px;&#10;  overflow: hidden;&#10;  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);&#10;  transition: all 0.4s ease;&#10;  display: flex;&#10;  flex-direction: column;&#10;  height: 100%;&#10;  border: 1px solid #333;&#10;  position: relative;&#10;}&#10;&#10;.product_card_container:hover {&#10;  transform: translateY(-8px) scale(1.02);&#10;  box-shadow: 0 8px 25px rgba(29, 185, 84, 0.2);&#10;  border-color: #1db954;&#10;}&#10;&#10;.product_card_anchor {&#10;  text-decoration: none;&#10;  color: inherit;&#10;}&#10;&#10;.product_card_image {&#10;  width: 100%;&#10;  height: 280px;&#10;  object-fit: cover;&#10;  transition: transform 0.5s ease;&#10;}&#10;&#10;.product_card_container:hover .product_card_image {&#10;  transform: scale(1.05);&#10;}&#10;&#10;.product_card_name {&#10;  font-size: 1.3rem;&#10;  font-weight: 600;&#10;  padding: 1rem 1.2rem 0.5rem;&#10;  color: #ffffff;&#10;}&#10;&#10;.product_card_price {&#10;  font-size: 1.4rem;&#10;  font-weight: 700;&#10;  padding: 0.5rem 1.2rem 1rem;&#10;  color: #1db954;&#10;}&#10;&#10;.product_atc_button {&#10;  background-color: #1db954;&#10;  color: white;&#10;  border: none;&#10;  padding: 0.8rem 1.5rem;&#10;  font-size: 1rem;&#10;  font-weight: 600;&#10;  cursor: pointer;&#10;  transition: all 0.3s ease;&#10;  border-radius: 8px;&#10;  margin: 0 1.2rem 1.2rem;&#10;  text-transform: uppercase;&#10;  letter-spacing: 1px;&#10;}&#10;&#10;.product_atc_button:hover {&#10;  background-color: #1ed760;&#10;  transform: scale(1.02);&#10;}&#10;&#10;/* Loading and Error States */&#10;.loading-container {&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  min-height: 50vh;&#10;  font-size: 1.5rem;&#10;  color: #1db954;&#10;}&#10;&#10;.error-container {&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  min-height: 50vh;&#10;  color: #ff4444;&#10;  font-size: 1.2rem;&#10;}&#10;&#10;/* Product Detail Page */&#10;.product_detail_container {&#10;  max-width: 1200px;&#10;  margin: 4rem auto;&#10;  padding: 3rem;&#10;  display: grid;&#10;  grid-template-columns: repeat(2, 1fr);&#10;  gap: 4rem;&#10;  background-color: #1e1e1e;&#10;  border-radius: 16px;&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);&#10;  border: 1px solid #333;&#10;  align-items: start;&#10;  text-align: center;&#10;}&#10;&#10;.product_detail_image {&#10;  width: 100%;&#10;  max-width: 500px;&#10;  aspect-ratio: 1;&#10;  object-fit: cover;&#10;  border-radius: 12px;&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);&#10;  border: 1px solid #333;&#10;  transition: transform 0.3s ease;&#10;  margin: 0 auto;&#10;}&#10;&#10;.product_detail_image:hover {&#10;  transform: scale(1.03);&#10;  border-color: #1db954;&#10;  box-shadow: 0 12px 40px rgba(29, 185, 84, 0.2);&#10;}&#10;&#10;.product_detail_info {&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: center;&#10;  align-items: center;&#10;  padding: 2rem;&#10;  text-align: center;&#10;  background-color: #1e1e1e;&#10;  border-radius: 12px;&#10;  border: 1px solid #333;&#10;  height: 100%;&#10;}&#10;&#10;.product_detail_name {&#10;  font-size: 2.8rem;&#10;  font-weight: 700;&#10;  color: #ffffff;&#10;  margin-bottom: 1.5rem;&#10;  line-height: 1.2;&#10;  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);&#10;  text-align: center;&#10;}&#10;&#10;.product_detail_description {&#10;  font-size: 1.2rem;&#10;  color: #cccccc;&#10;  margin: 2rem 0;&#10;  line-height: 1.8;&#10;  padding: 2rem 0;&#10;  border-top: 1px solid #333;&#10;  border-bottom: 1px solid #333;&#10;  max-width: 600px;&#10;  text-align: center;&#10;}&#10;&#10;.product_detail_price {&#10;  font-size: 3rem;&#10;  font-weight: 700;&#10;  color: #1db954;&#10;  margin: 2rem 0;&#10;  text-shadow: 0 2px 8px rgba(29, 185, 84, 0.3);&#10;}&#10;&#10;.product_detail_controls {&#10;  width: 100%;&#10;  max-width: 300px;&#10;  margin: 1rem auto;&#10;}&#10;&#10;.product_detail_controls .product_atc_button {&#10;  width: 100%;&#10;  padding: 1.2rem;&#10;  font-size: 1.2rem;&#10;  text-transform: uppercase;&#10;  letter-spacing: 2px;&#10;  background: linear-gradient(45deg, #1db954, #1ed760);&#10;  border-radius: 8px;&#10;  box-shadow: 0 4px 15px rgba(29, 185, 84, 0.3);&#10;  transition: all 0.3s ease;&#10;  border: none;&#10;  cursor: pointer;&#10;}&#10;&#10;.product_detail_controls .product_atc_button:hover {&#10;  transform: translateY(-2px) scale(1.02);&#10;  box-shadow: 0 6px 20px rgba(29, 185, 84, 0.4);&#10;  background: linear-gradient(45deg, #1ed760, #1db954);&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .product_card_list {&#10;    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));&#10;    padding: 1.5rem;&#10;    gap: 1.5rem;&#10;  }&#10;&#10;  .product_detail_container {&#10;    grid-template-columns: 1fr;&#10;    gap: 2rem;&#10;    margin: 1rem;&#10;    padding: 1.5rem;&#10;  }&#10;&#10;  .navbar {&#10;    padding: 1rem 1.5rem;&#10;  }&#10;&#10;  .navbar_title {&#10;    font-size: 1.5rem;&#10;  }&#10;&#10;  .product_detail_name {&#10;    font-size: 2rem;&#10;  }&#10;&#10;  .product_detail_price {&#10;    font-size: 2rem;&#10;  }&#10;&#10;  .product_detail_info {&#10;    padding: 1.5rem;&#10;  }&#10;&#10;  .product_detail_controls {&#10;    max-width: 100%;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="/* RustMart - Main Stylesheet */&#10;&#10;/* Reset and Base Styles */&#10;* {&#10;  margin: 0;&#10;  padding: 0;&#10;  box-sizing: border-box;&#10;}&#10;&#10;body {&#10;  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;  background-color: #121212;&#10;  color: #ffffff;&#10;  line-height: 1.6;&#10;}&#10;&#10;/* Navbar Styles */&#10;.navbar {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  background-color: #1e1e1e;&#10;  color: white;&#10;  padding: 1.2rem 2.5rem;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);&#10;  position: sticky;&#10;  top: 0;&#10;  z-index: 100;&#10;  border-bottom: 1px solid #333;&#10;}&#10;&#10;.navbar_title {&#10;  font-size: 2rem;&#10;  font-weight: bold;&#10;  letter-spacing: 2px;&#10;  color: #1db954; /* Spotify-like green */&#10;  text-transform: uppercase;&#10;}&#10;&#10;.navbar_cart_value {&#10;  background-color: #1db954;&#10;  color: #ffffff;&#10;  padding: 0.6rem 1.2rem;&#10;  border-radius: 25px;&#10;  font-weight: bold;&#10;  box-shadow: 0 2px 8px rgba(29, 185, 84, 0.3);&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.navbar_cart_value:hover {&#10;  transform: scale(1.05);&#10;  background-color: #1ed760;&#10;}&#10;&#10;/* Product List Layout */&#10;.product_card_list {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));&#10;  gap: 2.5rem;&#10;  padding: 3rem;&#10;  max-width: 1400px;&#10;  margin: 0 auto;&#10;}&#10;&#10;/* Product Card Styles */&#10;.product_card_container {&#10;  background-color: #1e1e1e;&#10;  border-radius: 12px;&#10;  overflow: hidden;&#10;  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);&#10;  transition: all 0.4s ease;&#10;  display: flex;&#10;  flex-direction: column;&#10;  height: 100%;&#10;  border: 1px solid #333;&#10;  position: relative;&#10;}&#10;&#10;.product_card_container:hover {&#10;  transform: translateY(-8px) scale(1.02);&#10;  box-shadow: 0 8px 25px rgba(29, 185, 84, 0.2);&#10;  border-color: #1db954;&#10;}&#10;&#10;.product_card_anchor {&#10;  text-decoration: none;&#10;  color: inherit;&#10;}&#10;&#10;.product_card_image {&#10;  width: 100%;&#10;  height: 280px;&#10;  object-fit: cover;&#10;  transition: transform 0.5s ease;&#10;}&#10;&#10;.product_card_container:hover .product_card_image {&#10;  transform: scale(1.05);&#10;}&#10;&#10;.product_card_name {&#10;  font-size: 1.3rem;&#10;  font-weight: 600;&#10;  padding: 1rem 1.2rem 0.5rem;&#10;  color: #ffffff;&#10;}&#10;&#10;.product_card_price {&#10;  font-size: 1.4rem;&#10;  font-weight: 700;&#10;  padding: 0.5rem 1.2rem 1rem;&#10;  color: #1db954;&#10;}&#10;&#10;.product_atc_button {&#10;  background-color: #1db954;&#10;  color: white;&#10;  border: none;&#10;  padding: 0.8rem 1.5rem;&#10;  font-size: 1rem;&#10;  font-weight: 600;&#10;  cursor: pointer;&#10;  transition: all 0.3s ease;&#10;  border-radius: 8px;&#10;  margin: 0 1.2rem 1.2rem;&#10;  text-transform: uppercase;&#10;  letter-spacing: 1px;&#10;}&#10;&#10;.product_atc_button:hover {&#10;  background-color: #1ed760;&#10;  transform: scale(1.02);&#10;}&#10;&#10;/* Loading and Error States */&#10;.loading-container {&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  min-height: 50vh;&#10;  font-size: 1.5rem;&#10;  color: #1db954;&#10;}&#10;&#10;.error-container {&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  min-height: 50vh;&#10;  color: #ff4444;&#10;  font-size: 1.2rem;&#10;}&#10;&#10;/* Product Detail Page */&#10;.product_detail_container {&#10;  max-width: 1200px;&#10;  margin: 4rem auto;&#10;  padding: 3rem;&#10;  display: grid;&#10;  grid-template-columns: repeat(2, 1fr);&#10;  gap: 4rem;&#10;  background-color: #1e1e1e;&#10;  border-radius: 16px;&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);&#10;  border: 1px solid #333;&#10;}&#10;&#10;.product_detail_image_container {&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  padding: 2rem;&#10;  background-color: #1e1e1e;&#10;  border-radius: 12px;&#10;  border: 1px solid #333;&#10;}&#10;&#10;.product_detail_image {&#10;  width: 100%;&#10;  max-width: 500px;&#10;  height: auto;&#10;  object-fit: contain;&#10;  border-radius: 12px;&#10;  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);&#10;  transition: transform 0.3s ease, border-color 0.3s ease;&#10;}&#10;&#10;.product_detail_image:hover {&#10;  transform: scale(1.02);&#10;  border-color: #1db954;&#10;  box-shadow: 0 12px 40px rgba(29, 185, 84, 0.2);&#10;}&#10;&#10;.product_detail_info {&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: center;&#10;  align-items: center;&#10;  text-align: center;&#10;  padding: 2rem;&#10;  background-color: #1e1e1e;&#10;  border-radius: 12px;&#10;  border: 1px solid #333;&#10;}&#10;&#10;.product_detail_name {&#10;  font-size: 2.8rem;&#10;  font-weight: 700;&#10;  color: #ffffff;&#10;  margin-bottom: 2rem;&#10;  line-height: 1.2;&#10;  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);&#10;  text-align: center;&#10;  width: 100%;&#10;}&#10;&#10;.product_detail_description {&#10;  font-size: 1.2rem;&#10;  color: #cccccc;&#10;  margin: 2rem 0;&#10;  line-height: 1.8;&#10;  padding: 2rem 0;&#10;  border-top: 1px solid #333;&#10;  border-bottom: 1px solid #333;&#10;  text-align: center;&#10;  width: 100%;&#10;}&#10;&#10;.product_detail_price {&#10;  font-size: 3rem;&#10;  font-weight: 700;&#10;  color: #1db954;&#10;  margin: 2rem 0;&#10;  text-shadow: 0 2px 8px rgba(29, 185, 84, 0.3);&#10;  text-align: center;&#10;  width: 100%;&#10;}&#10;&#10;.product_detail_controls {&#10;  width: 100%;&#10;  display: flex;&#10;  justify-content: center;&#10;  margin-top: 2rem;&#10;}&#10;&#10;.product_detail_controls .product_atc_button {&#10;  width: 100%;&#10;  max-width: 300px;&#10;  padding: 1.2rem;&#10;  font-size: 1.2rem;&#10;  text-transform: uppercase;&#10;  letter-spacing: 2px;&#10;  background: linear-gradient(45deg, #1db954, #1ed760);&#10;  border-radius: 8px;&#10;  box-shadow: 0 4px 15px rgba(29, 185, 84, 0.3);&#10;  transition: all 0.3s ease;&#10;  border: none;&#10;  cursor: pointer;&#10;}&#10;&#10;.product_detail_controls .product_atc_button:hover {&#10;  transform: translateY(-2px) scale(1.02);&#10;  box-shadow: 0 6px 20px rgba(29, 185, 84, 0.4);&#10;  background: linear-gradient(45deg, #1ed760, #1db954);&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .product_card_list {&#10;    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));&#10;    padding: 1.5rem;&#10;    gap: 1.5rem;&#10;  }&#10;&#10;  .product_detail_container {&#10;    grid-template-columns: 1fr;&#10;    gap: 2rem;&#10;    margin: 2rem;&#10;    padding: 1.5rem;&#10;  }&#10;&#10;  .navbar {&#10;    padding: 1rem 1.5rem;&#10;  }&#10;&#10;  .navbar_title {&#10;    font-size: 1.5rem;&#10;  }&#10;&#10;  .product_detail_name {&#10;    font-size: 2rem;&#10;  }&#10;&#10;  .product_detail_description {&#10;    font-size: 1.1rem;&#10;  }&#10;&#10;  .product_detail_price {&#10;    font-size: 2.5rem;&#10;  }&#10;&#10;  .product_detail_controls {&#10;    padding: 0 1rem;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>